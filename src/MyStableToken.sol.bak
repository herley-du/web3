// SPDX-License-Identifier: MIT
pragma solidity ^0.8.30;

/// MyStableToken - a minimal "stablecoin-like" ERC20 for testing/learning.
/// - Uses OpenZeppelin ERC20, AccessControl, Pausable, Burnable, Permit (EIP-2612)
import "openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import "openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "openzeppelin-contracts/contracts/token/ERC20/extensions/draft-ERC20Permit.sol";
import "openzeppelin-contracts/contracts/security/Pausable.sol";
import "openzeppelin-contracts/contracts/access/AccessControl.sol";

contract MyStableToken is ERC20, ERC20Burnable, ERC20Permit, Pausable, AccessControl {
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    constructor(uint256 initialSupply) ERC20("MyStableToken", "MST") ERC20Permit("MyStableToken") {
        // grant roles to deployer by default
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(MINTER_ROLE, msg.sender);
        _setupRole(PAUSER_ROLE, msg.sender);

        if (initialSupply > 0) {
            _mint(msg.sender, initialSupply);
        }
    }

    // owner/minter-only mint
    function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) {
        _mint(to, amount);
    }

    // pausable hooks
    function pause() external onlyRole(PAUSER_ROLE) {
        _pause();
    }
    function unpause() external onlyRole(PAUSER_ROLE) {
        _unpause();
    }

    // hook to respect pausability on transfers
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override(ERC20) {
        require(!paused(), "token: paused");
        super._beforeTokenTransfer(from, to, amount);
    }
}
